buildscript {
    ext.buildConfig = [
            'compileSdk': 28,
            'minSdk'    : 19,
            'targetSdk' : 28,

            'version'   : [
                    'major': 1,
                    'minor': 3,
                    'patch': 4,
                    'build': 0,
            ],
    ]
    ext.buildConfig.version['name'] = "${buildConfig.version.major}.${buildConfig.version.minor}.${buildConfig.version.patch}"
    ext.buildConfig.version['fullName'] = "${buildConfig.version.name}.${buildConfig.version.build}"
    ext.buildConfig.version['code'] = buildConfig.version.major * 1000000 + buildConfig.version.minor * 10000 + buildConfig.version.patch * 100 + buildConfig.version.build

    ext.isCiBuild = System.getenv('CI') == 'false'

    repositories {
        mavenCentral()
        google()
        maven { url "https://maven.google.com" }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:1.3.41"
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.3.41"
        classpath "org.openapitools:openapi-generator-gradle-plugin:3.3.4"
        classpath 'com.google.gms:google-services:4.3.0' // google-services plugin
        classpath 'io.fabric.tools:gradle:1.27.1'
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        classpath 'co.touchlab:kotlinxcodesync:0.1.5'
    }
}

apply plugin: "io.spring.dependency-management"
apply from: "versions.gradle"


allprojects {

    repositories {
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        google()
        jcenter()
    }

    tasks.withType(JavaCompile).all {
        options.compilerArgs += [
                '-Adagger.formatGeneratedSource=disabled'
        ]
    }
    afterEvaluate {
        def kapt = extensions.findByName('kapt')
        if (kapt != null) {
            kapt.arguments {
                arg("dagger.formatGeneratedSource", "disabled")
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs += [
                    '-progressive'
            ]
        }
    }

    tasks.withType(Test) {
        testLogging {
            events "skipped", "failed", "passed"
        }
    }
}

def useDaggerReflect() {
    return hasProperty('dagger.reflect') ? getProperty('dagger.reflect') == 'true' : false
}

apply from: file('gradle/projectDependencyGraph.gradle')
